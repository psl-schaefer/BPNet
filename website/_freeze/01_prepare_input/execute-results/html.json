{
  "hash": "2fffc7174ebc47d5ff61651fcdfc6bf2",
  "result": {
    "markdown": "---\ntitle: \"01 Prepare Input\"\nengine: knitr\nexecute:\n  freeze: auto\nformat:\n  html:\n    html-math-method: mathjax\n    theme: darkly\n    toc: true\n    number-sections: true\n    code-tools:\n      source: repo\ndescription: \"From raw ChIP-seq data to model input.\"\n---\n\n\n\n\n# Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(RETICULATE_PYTHON = \"/home/philipp/miniconda3/envs/r-reticulate/bin/python3\")\nsuppressPackageStartupMessages({\n  library(reticulate)\n  library(rtracklayer)\n  library(GenomicAlignments)\n  library(BRGenomics)\n  library(BSgenome.Mmusculus.UCSC.mm10)\n  library(tidyverse)\n  library(furrr)\n  library(motifmatchr)\n  library(JASPAR2020)\n  library(TFBSTools)\n})\n# Setup Multiprocessing\noptions(future.globals.maxSize=5000*1024^2)\nfuture::plan(future::multisession, workers = 4)\n```\n:::\n\n\n# Configs\n\n## Output Directory\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_dir <- \"/home/philipp/BPNet/input/\"\nif (!dir.exists(output_dir)){dir.create(output_dir)}\nTFs <- c(\"Sox2\", \"Oct4\", \"Klf4\", \"Nanog\")\npurrr::walk(c(TFs, \"patchcap\", \"figures\"), ~ if (!dir.exists(paste0(output_dir, .x))){dir.create(paste0(output_dir, .x))})\n```\n:::\n\n\n## Peak Width\n\nAs in the BPNet paper, we are using a peak width of 1000 bp, meaning we consider 500 bp up- and downstream of the ChIP-seq peaks.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-3_cafe177374371d32ee912394e3d511c8'}\n\n```{.r .cell-code}\npeak_width <- 1000\n```\n:::\n\n\n## Chromosome Train/Tune/Test split\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-4_7f4b0cf4060801d739815db0a1af7eb6'}\n\n```{.r .cell-code}\nall_chroms <- paste0(\"chr\", c(1:19, \"X\", \"Y\"))\n\n# we use the same train/tune/test split as in the BPnet paper\nchrom_list <- list(\"tune\" = c(\"chr2\", \"chr3\", \"chr4\"), # tune set (hyperparameter tuning): chromosomes 2, 3, 4\n                   \"test\" = c(\"chr1\", \"chr8\", \"chr9\")) # test set (performance evaluation): chromosome 1, 8, 9\nchrom_list$train <- setdiff(all_chroms, c(chrom_list$tune, chrom_list$test)) # train set: all other chromosomes\nchrom_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$tune\n[1] \"chr2\" \"chr3\" \"chr4\"\n\n$test\n[1] \"chr1\" \"chr8\" \"chr9\"\n\n$train\n [1] \"chr5\"  \"chr6\"  \"chr7\"  \"chr10\" \"chr11\" \"chr12\" \"chr13\" \"chr14\" \"chr15\"\n[10] \"chr16\" \"chr17\" \"chr18\" \"chr19\" \"chrX\"  \"chrY\" \n```\n:::\n:::\n\n\n## Colors\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-5_9982b2d3e71bcea0ed823651b3fa533c'}\n\n```{.r .cell-code}\ncolors = c(\"Klf4\" = \"#92C592\",\n           \"Nanog\" = \"#FFE03F\",\n           \"Oct4\" = \"#CD5C5C\",\n           \"Sox2\" = \"#849EEB\",\n           \"patchcap\" = \"#827F81\")\n```\n:::\n\n\n# Function for One-Hot Encoding\n\nTraditionally DNA sequences are encoded using: A = [1, 0, 0, 0], C = [0, 1, 0, 0], G = [0, 0, 1, 0], T = [0, 0, 0, 1], N = [0, 0, 0, 0].\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-6_1f5498c55e126be5ded9997dd1e22ca6'}\n\n```{.r .cell-code}\none_hot <- function(sequence) {\n  len = nchar(sequence)\n  mtx <- matrix(data=0, nrow=4, ncol=len)\n  for (i in 1:len) {\n    if (substr(sequence, i, i) == \"A\") mtx[1, i] = 1\n    else if (substr(sequence, i, i) == \"C\") mtx[2, i] = 1\n    else if (substr(sequence, i, i) == \"G\") mtx[3, i] = 1\n    else if (substr(sequence, i, i) == \"T\") mtx[4, i] = 1\n  }\n  return(mtx)\n}\n\ncompiler::enableJIT(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\none_hot_c <- compiler::cmpfun(one_hot) # compiling to bytecode not machine code like numba\n```\n:::\n\n\n# Read Stats\n\nLook at the reading stats per TF to check how comparable the different ChIP-Nexus experiments are.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-7_fff1cb96d98c8c6572609abe9b8f08c8'}\n\n```{.r .cell-code}\ntotal_reads <- TFs %>%\n  purrr::set_names() %>%\n  purrr::map_dbl(function(tf) {\n    Rsamtools::countBam(paste0(\"../data/chip-nexus/\", tf, \"/pool_filt.bam\"))$records\n  })\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_bar(aes(y=names(total_reads), x=total_reads/1e6), stat=\"identity\", fill=\"blue\", alpha=0.4, width=0.4) +\n  labs(x=\"N\", y=\"TF\") +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInverted geom defaults of fill and color/colour.\nTo change them back, use invert_geom_defaults().\n```\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# Load the Peak Data\n\nFor each transcription factor (TF) we read in the peak information provided by the authors of the BPNet paper. The peaks were called using `MACS2`  (v.2.1.1.20160309). The following non-default settings were used: `shift=-75`, `extsize=150`, meaning the 5' ends of each read were extended 75 bp in both directions.\n\nIn particular `shift=-75` means the 5' ends of the reads are moved -75 bp and `extsize=150` means the reads are extended to a fixed length of 150 bp in 5' -> 3' direction.\n\n<details>\n<summary>Click to view sketch</summary>\n![](img/macs2_explanation.png)\n</details>\n\nCheck the `macs3 callpeak` documentation [here](https://github.com/macs3-project/MACS/blob/master/docs/callpeak.md)\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-9_379904c07f5851aa0fc7a99cffd367e2'}\n\n```{.r .cell-code}\npeak_infos <- purrr::map(TFs, function(tf) {\n\n  narrowPeaks <- \n    rtracklayer::import(paste0(\"/home/philipp/AML_Final_Project/data/chip-nexus/\", tf, \"/idr-optimal-set.narrowPeak\"), \n                           format=\"narrowPeak\")\n  \n  # read in the peak summits and extend symmetrically to get 1000 bp width\n  summits <- \n    rtracklayer::import(paste0(\"/home/philipp/AML_Final_Project/data/chip-nexus/\", tf, \"/idr-optimal-set.summit.bed\"), \n                           format=\"bed\") %>%\n    GenomicRanges::resize(width=peak_width, fix=\"center\") %>%\n    plyranges::mutate(TF = tf) %>%\n    plyranges::mutate(set = dplyr::case_when(\n                        as.character(seqnames) %in% chrom_list$tune ~ \"tune\",\n                        as.character(seqnames) %in% chrom_list$test ~ \"test\",\n                        as.character(seqnames) %in% chrom_list$train ~ \"train\"))\n  \n  GenomicRanges::elementMetadata(summits) <- cbind(\n    GenomicRanges::elementMetadata(summits),\n    GenomicRanges::elementMetadata(narrowPeaks)\n  )\n  \n  summits\n\n}) %>%\n  do.call(what=c, args=.)\n\n# save peak info as tsv\nwrite_delim(data.frame(peak_infos) %>% dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)), \n            file=paste0(output_dir, \"region_info.tsv\"), delim = \"\\t\")\n\npeak_infos %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 6 ranges and 8 metadata columns:\n      seqnames              ranges strand |          TF         set        name\n         <Rle>           <IRanges>  <Rle> | <character> <character> <character>\n  [1]     chrX 143482559-143483558      * |        Sox2       train        <NA>\n  [2]     chrY     4149724-4150723      * |        Sox2       train        <NA>\n  [3]     chr9     3001634-3002633      * |        Sox2        test        <NA>\n  [4]     chr3 122145078-122146077      * |        Sox2        tune        <NA>\n  [5]     chr5   28209565-28210564      * |        Sox2       train        <NA>\n  [6]     chr8   86393561-86394560      * |        Sox2        test        <NA>\n          score signalValue    pValue    qValue      peak\n      <numeric>   <numeric> <numeric> <numeric> <integer>\n  [1]      1000    65.04316  37093.23  37086.70       145\n  [2]      1000    59.28276   2920.20   2914.44       142\n  [3]      1000     7.05411   2326.30   2320.59       128\n  [4]      1000    25.36805   1518.00   1512.39       407\n  [5]      1000    29.15046   1502.75   1497.15       292\n  [6]      1000    27.50292   1455.06   1449.46       307\n  -------\n  seqinfo: 21 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n\n## Distribution of the MACS2 Scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- peak_infos %>%\n  as.data.frame() %>%\n  ggplot() +\n  geom_density(aes(x=log2(qValue), color=TF), alpha=0.4, fill=NA) +\n  labs(x=\"Log2 qValue\", y=\"Density\", color=\"TF\") +\n  scale_color_manual(values=colors) +\n  theme_bw()\nggsave(filename = \"/home/philipp/BPNet/out/figures/macs2_scores_per_tf.pdf\", \n       plot = p, width = 4, height = 4)\np +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-10-1.png){width=384}\n:::\n:::\n\n\n## Number of Peaks per TF\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- peak_infos %>%\n  as.data.frame() %>%\n  ggplot() +\n  geom_bar(aes(y=TF, fill=TF), alpha=0.4, width=0.4, color=\"black\") +\n  labs(x=\"Number of Peaks\", y=\"TF\") +\n  theme_bw() +\n  scale_fill_manual(values=colors)\nggsave(filename = \"/home/philipp/BPNet/out/figures/n_peaks_per_tf.pdf\", \n       plot = p, width = 4, height = 4)\np +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-11-1.png){width=384}\n:::\n:::\n\n\n# Translate Peak Sequences to One-Hot Encoding\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-12_a383127c0566fd48ae5e5c1fe527552f'}\n\n```{.r .cell-code}\nseq_names <- purrr::imap(chrom_list, function(set_chroms, set_name) {\n\n  peak_info_subset <- peak_infos[seqnames(peak_infos) %in% set_chroms]\n\n  rnames <- paste0(as.character(peak_info_subset@seqnames), \":\",\n         peak_info_subset@ranges@start, \"-\",\n         peak_info_subset@ranges@start + peak_info_subset@ranges@width - 1)\n  \n  write_lines(rnames, file = paste0(output_dir, set_name, \"_seq_names.txt\"))\n  \n  rnames\n})\n```\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-13_78dc5cdce89b099417057b0b08157c09'}\n\n```{.r .cell-code}\nstr(seq_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ tune : chr [1:29277] \"chr3:122145078-122146077\" \"chr3:108433158-108434157\" \"chr2:52071742-52072741\" \"chr4:141565124-141566123\" ...\n $ test : chr [1:27727] \"chr9:3001634-3002633\" \"chr8:86393561-86394560\" \"chr9:102205227-102206226\" \"chr1:134534776-134535775\" ...\n $ train: chr [1:93904] \"chrX:143482559-143483558\" \"chrY:4149724-4150723\" \"chr5:28209565-28210564\" \"chr12:74803793-74804792\" ...\n```\n:::\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-14_04cf158726ee2b361c5d72fd1b3108f5'}\n\n```{.r .cell-code}\none_hot_seqs <- furrr::future_imap(chrom_list, function(set_chroms, set_name) {\n\n  peak_info_subset <- peak_infos[seqnames(peak_infos) %in% set_chroms]\n\n  peak_seqs <- BSgenome::getSeq(\n    BSgenome.Mmusculus.UCSC.mm10,\n    names=as.character(peak_info_subset@seqnames),\n    start=(peak_info_subset@ranges@start),\n    end=(peak_info_subset@ranges@start + peak_width - 1),\n    strand=\"+\"\n  )\n  peak_seqs@ranges@NAMES <- seq_names[[set_name]]\n  # check for correctness here: https://genome.ucsc.edu/cgi-bin/hgTracks?db=mm10\n  Biostrings::writeXStringSet(x=peak_seqs,\n                              filepath = paste0(output_dir, set_name, \"_seqs.fa\"))\n\n  # one hot encode the sequence\n  one_hot_mtx <- matrix(data=0, nrow=length(peak_seqs)*4, ncol=peak_width)\n  for (peak_index in 1:length(peak_seqs)) {\n    one_hot_mtx[(((peak_index-1)*4)+1):((peak_index)*4), ] <-\n      one_hot_c(as.character(peak_seqs[[peak_index]]))\n  }\n  one_hot_mtx\n})\n```\n:::\n\n\nCheck the output:\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-15_c8065d0496717b779a560ce4716e6f34'}\n\n```{.r .cell-code}\nstr(one_hot_seqs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ tune : num [1:117108, 1:1000] 1 0 0 0 0 1 0 0 0 0 ...\n $ test : num [1:110908, 1:1000] 0 0 0 1 0 1 0 0 0 0 ...\n $ train: num [1:375616, 1:1000] 0 0 0 1 1 0 0 0 0 1 ...\n```\n:::\n:::\n\n\nWrite the matrices in binary format to disk using `reticulate`.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-16_77922b072d888642cbb03471984a2fb0'}\n\n```{.python .cell-code}\nimport numpy as np\n\nfor key, val in r.one_hot_seqs.items():\n  old_shape = val.shape\n  val = val.reshape(int(val.shape[0]/4), 4, 1000).astype(np.float32)\n  print(f\"{key}: {old_shape} -> {val.shape}\")\n  save_path = f\"{r.output_dir}{key}_one_hot_seqs.npy\"\n  print(f\"-> {save_path}\")\n  np.save(file=save_path, arr=val)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntune: (117108, 1000) -> (29277, 4, 1000)\n-> /home/philipp/BPNet/input/tune_one_hot_seqs.npy\ntest: (110908, 1000) -> (27727, 4, 1000)\n-> /home/philipp/BPNet/input/test_one_hot_seqs.npy\ntrain: (375616, 1000) -> (93904, 4, 1000)\n-> /home/philipp/BPNet/input/train_one_hot_seqs.npy\n```\n:::\n:::\n\n\n# Extract the TF Counts\n\nFirst we have to merge overlapping peaks from the peak info file. Otherwise we read reads aligning to these overlapping peaks several times.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-17_f97b169440df74dfc1fc6b3ffd5596ac'}\n\n```{.r .cell-code}\npeak_infos_reduced <- GenomicRanges::reduce(resize(peak_infos, GenomicRanges::width(peak_infos + 1), \"start\"))\npeak_infos_reduced\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 85250 ranges and 0 metadata columns:\n          seqnames              ranges strand\n             <Rle>           <IRanges>  <Rle>\n      [1]     chrX     5704156-5705557      *\n      [2]     chrX     6278899-6280002      *\n      [3]     chrX     6411759-6412760      *\n      [4]     chrX     6415698-6416699      *\n      [5]     chrX     6445022-6446023      *\n      ...      ...                 ...    ...\n  [85246]    chr10 130523572-130524574      *\n  [85247]    chr10 130527565-130528566      *\n  [85248]    chr10 130535527-130536528      *\n  [85249]    chr10 130541495-130543475      *\n  [85250]    chr10 130594405-130595406      *\n  -------\n  seqinfo: 21 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-18_61cd3857fc107251e502e4442be2716a'}\n\n```{.r .cell-code}\n### Parallel loop over all tfs\ntf_counts <- TFs %>%\n  purrr::set_names() %>%\n  furrr::future_map(function(tf) {\n    \n  # read only from the alignment file in the given peak regions\n  # note: make sure that the BAM file is sorted (check for presence of \".bam.bai\")\n  alignments <- readGAlignments(paste0(\"../data/chip-nexus/\", tf, \"/pool_filt.bam\"),\n                                param = ScanBamParam(which=peak_infos_reduced))\n\n  # split the alignment into pos and neg strand\n  align_pos <- alignments[GenomicRanges::strand(alignments)==\"+\"]\n  align_neg <- alignments[GenomicRanges::strand(alignments)==\"-\"]\n\n  # only retain first base pair of each read\n  align_pos@cigar <- rep(\"1M\", length(align_pos))\n  align_neg@start <- GenomicAlignments::end(align_neg)\n  align_neg@cigar <- rep(\"1M\", length(align_neg))\n\n  # compute the coverage per base pair\n  cov_list = list(\"pos\" = GenomicAlignments::coverage(align_pos, weight = 1L),\n                  \"neg\" = GenomicAlignments::coverage(align_neg, weight = 1L))\n    \n  chrom_list %>% \n    purrr::imap(function(set_chroms, set_name) {\n      peak_info_subset <- peak_infos[seqnames(peak_infos) %in% set_chroms]\n      c(\"pos\", \"neg\") %>%\n        purrr::set_names() %>%\n        purrr::map(function(strand) {\n          mtx <- matrix(data=0, ncol=peak_width, nrow=length(peak_info_subset))\n          for (i in 1:length(peak_info_subset)) {\n            chr <- as.character(peak_info_subset[i]@seqnames)\n            position_index <- peak_info_subset[i]@ranges@start:(peak_info_subset[i]@ranges@start + peak_width - 1)\n            mtx[i, ] = as.numeric(cov_list[[strand]][[chr]][position_index])\n          }\n          mtx\n      })\n    })\n  })\n```\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-19_6de4e0a0b245511b9494e396f15170d9'}\n\n```{.r .cell-code}\nstr(tf_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ Sox2 :List of 3\n  ..$ tune :List of 2\n  .. ..$ pos: num [1:29277, 1:1000] 0 0 0 0 0 0 0 0 1 0 ...\n  .. ..$ neg: num [1:29277, 1:1000] 0 0 1 0 0 0 0 0 1 0 ...\n  ..$ test :List of 2\n  .. ..$ pos: num [1:27727, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:27727, 1:1000] 0 0 0 0 0 0 0 1 0 0 ...\n  ..$ train:List of 2\n  .. ..$ pos: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n $ Oct4 :List of 3\n  ..$ tune :List of 2\n  .. ..$ pos: num [1:29277, 1:1000] 1 1 1 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:29277, 1:1000] 1 0 1 0 0 0 0 0 0 0 ...\n  ..$ test :List of 2\n  .. ..$ pos: num [1:27727, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:27727, 1:1000] 0 0 0 0 0 2 0 0 0 0 ...\n  ..$ train:List of 2\n  .. ..$ pos: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 2 0 ...\n  .. ..$ neg: num [1:93904, 1:1000] 0 0 1 0 0 0 0 0 0 0 ...\n $ Klf4 :List of 3\n  ..$ tune :List of 2\n  .. ..$ pos: num [1:29277, 1:1000] 0 0 1 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:29277, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ test :List of 2\n  .. ..$ pos: num [1:27727, 1:1000] 0 1 0 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:27727, 1:1000] 0 0 0 0 0 3 0 0 0 0 ...\n  ..$ train:List of 2\n  .. ..$ pos: num [1:93904, 1:1000] 0 0 0 0 0 1 0 0 2 0 ...\n  .. ..$ neg: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n $ Nanog:List of 3\n  ..$ tune :List of 2\n  .. ..$ pos: num [1:29277, 1:1000] 1 0 1 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:29277, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ test :List of 2\n  .. ..$ pos: num [1:27727, 1:1000] 0 1 0 1 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:27727, 1:1000] 0 1 0 0 0 1 0 1 0 0 ...\n  ..$ train:List of 2\n  .. ..$ pos: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  .. ..$ neg: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n```\n:::\n:::\n\n\nWrite the matrices in binary format to disk using `reticulate`.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-20_2543552a7690d75f134dbad55be7bdfa'}\n\n```{.python .cell-code}\nimport numpy as np\n\nfor tf_name, tf_entry in r.tf_counts.items():\n  print(tf_name)\n  for set_name, set_entry in tf_entry.items():\n    mtx = np.stack([set_entry[\"pos\"], set_entry[\"neg\"]], axis=1).astype(np.float32)\n    print(f\"\\t{set_name} shape: {mtx.shape}\")\n    save_path = f\"{r.output_dir}{tf_name}/{set_name}_counts.npy\"\n    print(f\"\\t-> {save_path}\")\n    np.save(file=save_path, arr=mtx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSox2\n\ttune shape: (29277, 2, 1000)\n\t-> /home/philipp/BPNet/input/Sox2/tune_counts.npy\n\ttest shape: (27727, 2, 1000)\n\t-> /home/philipp/BPNet/input/Sox2/test_counts.npy\n\ttrain shape: (93904, 2, 1000)\n\t-> /home/philipp/BPNet/input/Sox2/train_counts.npy\nOct4\n\ttune shape: (29277, 2, 1000)\n\t-> /home/philipp/BPNet/input/Oct4/tune_counts.npy\n\ttest shape: (27727, 2, 1000)\n\t-> /home/philipp/BPNet/input/Oct4/test_counts.npy\n\ttrain shape: (93904, 2, 1000)\n\t-> /home/philipp/BPNet/input/Oct4/train_counts.npy\nKlf4\n\ttune shape: (29277, 2, 1000)\n\t-> /home/philipp/BPNet/input/Klf4/tune_counts.npy\n\ttest shape: (27727, 2, 1000)\n\t-> /home/philipp/BPNet/input/Klf4/test_counts.npy\n\ttrain shape: (93904, 2, 1000)\n\t-> /home/philipp/BPNet/input/Klf4/train_counts.npy\nNanog\n\ttune shape: (29277, 2, 1000)\n\t-> /home/philipp/BPNet/input/Nanog/tune_counts.npy\n\ttest shape: (27727, 2, 1000)\n\t-> /home/philipp/BPNet/input/Nanog/test_counts.npy\n\ttrain shape: (93904, 2, 1000)\n\t-> /home/philipp/BPNet/input/Nanog/train_counts.npy\n```\n:::\n:::\n\n\n## Examples: Highest Scoring Peaks\n\n<details>\n<summary>Click to expand</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_df <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"train\") %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::group_by(TF) %>%\n  slice_max(order_by=qValue, n=5) %>%\n  select(Region, TF, qValue)\n\npurrr::walk(1:nrow(test_df), function(i) {\n  test_instance <- unlist(test_df[i, ])\n  purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                 minus = -tf_counts[[tf]]$train$neg[match(test_instance[\"Region\"], seq_names$train), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  pivot_longer(cols=c(minus, plus)) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=name)) +\n  facet_wrap(~TF, scales=\"free_y\") +\n  ggdark::dark_theme_linedraw() +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=paste0(\"Peak \", test_instance[\"Region\"], \" | \", test_instance[\"TF\"], \n                    \" | \", test_instance[\"qValue\"])) -> p\n  print(p)\n})\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-19.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-21-20.png){width=672}\n:::\n:::\n\n</details>\n\n## Examples: Random Peaks\n\n<details>\n<summary>Click to expand</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\ntest_df <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"train\") %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::group_by(TF) %>%\n  slice_sample(n=5) %>%\n  select(Region, TF, qValue)\n\npurrr::walk(1:nrow(test_df), function(i) {\n  test_instance <- unlist(test_df[i, ])\n  purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                 minus = -tf_counts[[tf]]$train$neg[match(test_instance[\"Region\"], seq_names$train), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  pivot_longer(cols=c(minus, plus)) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=name)) +\n  facet_wrap(~TF, scales=\"free_y\") +\n  ggdark::dark_theme_linedraw() +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=paste0(\"Peak \", test_instance[\"Region\"], \" | \", test_instance[\"TF\"], \n                    \" | \", test_instance[\"qValue\"])) -> p\n  print(p)\n})\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-19.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-22-20.png){width=672}\n:::\n:::\n\n</details>\n\n# Extract the Control (Patchcap) Counts\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-23_6df2e88cbd817e252c08edc8e0bf387d'}\n\n```{.r .cell-code}\npatchcap_input <- \n  c(\"pos\", \"neg\") %>%\n  purrr::set_names() %>%\n  purrr::map(function(strand){\n  rtracklayer::import.bw(paste0(\"../data/chip-nexus/patchcap/counts.\", strand, \".bw\")) %>%\n    GenomicRanges::coverage(., weight = \"score\")\n})\n\nctrl_counts <- furrr::future_imap(chrom_list, function(set_chroms, set_name) {\n\n  peak_info_subset <- peak_infos[seqnames(peak_infos) %in% set_chroms]\n\n  c(\"pos\", \"neg\") %>%\n    purrr::set_names() %>%\n    purrr::map(function(strand) {\n\n      mtx <- matrix(data=0, ncol=peak_width, nrow=length(peak_info_subset))\n  \n      for (seq_index in 1:nrow(mtx)) {\n        chrom_index <- as.character(peak_info_subset[seq_index]@seqnames)\n        position_index <- peak_info_subset[seq_index]@ranges@start:(peak_info_subset[seq_index]@ranges@start+peak_width-1)\n        mtx[seq_index, ] = as.numeric(patchcap_input[[strand]][[chrom_index]][position_index])\n      }\n      mtx\n  })\n})\n```\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-24_cec5fa89f332c9a9fc70ada09e333183'}\n\n```{.r .cell-code}\nstr(ctrl_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ tune :List of 2\n  ..$ pos: num [1:29277, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ neg: num [1:29277, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n $ test :List of 2\n  ..$ pos: num [1:27727, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ neg: num [1:27727, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n $ train:List of 2\n  ..$ pos: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 1 0 ...\n  ..$ neg: num [1:93904, 1:1000] 0 0 0 0 0 0 0 0 0 0 ...\n```\n:::\n:::\n\n\nWrite the matrices in binary format to disk using `reticulate`\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-25_9b31255cc28cd6b8e3adf49a822f2006'}\n\n```{.python .cell-code}\nimport numpy as np\n\nfor set_name, set_entry in r.ctrl_counts.items():\n  mtx = np.stack([set_entry[\"pos\"], set_entry[\"neg\"]], axis=1).astype(np.float32)\n  print(f\"\\t{set_name} shape: {mtx.shape}\")\n  save_path = f\"{r.output_dir}patchcap/{set_name}_counts.npy\"\n  print(f\"\\t-> {save_path}\")\n  np.save(file=save_path, arr=mtx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ttune shape: (29277, 2, 1000)\n\t-> /home/philipp/BPNet/input/patchcap/tune_counts.npy\n\ttest shape: (27727, 2, 1000)\n\t-> /home/philipp/BPNet/input/patchcap/test_counts.npy\n\ttrain shape: (93904, 2, 1000)\n\t-> /home/philipp/BPNet/input/patchcap/train_counts.npy\n```\n:::\n:::\n\n\n## Examples: Highest Scoring Peaks with Bias\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-26_e08f1296fd6968b2ddfbe3f2395f93a8'}\n\n```{.r .cell-code}\ntest_instance <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"test\") %>%\n  dplyr::filter(seqnames==\"chr1\", start >= 180924752-1000, end <= 180925152+1000) %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::select(Region, TF, qValue) %>%\n  .[1, ]\nprint(test_instance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    Region   TF   qValue\n1 chr1:180924435-180925434 Sox2 436.0653\n```\n:::\n\n```{.r .cell-code}\np <- purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$test$pos[match(test_instance[\"Region\"], seq_names$test), ],\n                 minus = -tf_counts[[tf]]$test$neg[match(test_instance[\"Region\"], seq_names$test), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  rbind(\n    tibble::tibble(position=-499:500, \n                   plus = ctrl_counts$test$pos[match(test_instance[\"Region\"], seq_names$test), ],\n                   minus = -ctrl_counts$test$neg[match(test_instance[\"Region\"], seq_names$test), ],\n                   TF = \"patchcap\", p_name = test_instance[\"Region\"])\n  ) %>%\n  pivot_longer(cols=c(minus, plus)) %>%\n  dplyr::mutate(TF = factor(TF, levels=names(colors))) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=TF, alpha=name), size=0.2) +\n  facet_wrap(~TF, ncol=1, scales=\"free_y\") +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=test_instance[\"Region\"]) +\n  #scale_color_manual(values=c(\"minus\"=\"darkred\", \"plus\"=\"forestgreen\")) +\n  scale_color_manual(values=colors) +\n  scale_alpha_manual(values=c(\"plus\" = 1, \"minus\" = 1)) +\n  theme_bw() +\n  theme(plot.title = element_text(size=10, hjust=0.5), strip.background = element_rect(fill=NA))\nggsave(filename = \"/home/philipp/BPNet/out/figures/example_high_q.pdf\", \n       plot = p, width = 4, height = 8)\np + \n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-26-1.png){width=384}\n:::\n:::\n\n\n\n<details>\n<summary>Click to view more plots</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_df <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"train\") %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::group_by(TF) %>%\n  slice_max(order_by=qValue, n=5) %>%\n  select(Region, TF, qValue)\npurrr::walk(1:nrow(test_df), function(i) {\n  test_instance <- unlist(test_df[i, ])\n  purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                 minus = -tf_counts[[tf]]$train$neg[match(test_instance[\"Region\"], seq_names$train), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  rbind(\n    tibble::tibble(position=-499:500, \n                   plus = ctrl_counts$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                   minus = -ctrl_counts$train$neg[match(test_instance[\"Region\"], seq_names$train), ],\n                   TF = \"Bias\", p_name = test_instance[\"Region\"])\n  ) %>%\n  pivot_longer(cols=c(minus, plus)) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=name)) +\n  facet_wrap(~TF, scales=\"free_y\") +\n  ggdark::dark_theme_linedraw() +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=paste0(\"Peak \", test_instance[\"Region\"], \" | \", test_instance[\"TF\"], \n                    \" | \", test_instance[\"qValue\"])) -> p\n  print(p)\n})\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-19.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-27-20.png){width=672}\n:::\n:::\n\n\n## Examples: Random Peaks with Bias\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-28_ef3d11144ea6f1892da3c9320054a175'}\n\n```{.r .cell-code}\ntest_instance <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"test\") %>%\n  dplyr::filter(seqnames==\"chr1\", start >= 4000, end <= 100000000) %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::select(Region, TF, qValue) %>%\n  .[1000, ]\nprint(test_instance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Region   TF   qValue\n1000 chr1:58392603-58393602 Oct4 21.10429\n```\n:::\n\n```{.r .cell-code}\np <- purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$test$pos[match(test_instance[\"Region\"], seq_names$test), ],\n                 minus = -tf_counts[[tf]]$test$neg[match(test_instance[\"Region\"], seq_names$test), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  rbind(\n    tibble::tibble(position=-499:500, \n                   plus = ctrl_counts$test$pos[match(test_instance[\"Region\"], seq_names$test), ],\n                   minus = -ctrl_counts$test$neg[match(test_instance[\"Region\"], seq_names$test), ],\n                   TF = \"patchcap\", p_name = test_instance[\"Region\"])\n  ) %>%\n  pivot_longer(cols=c(minus, plus)) %>%\n  dplyr::mutate(TF = factor(TF, levels=names(colors))) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=TF, alpha=name), size=0.2) +\n  facet_wrap(~TF, ncol=1, scales=\"free_y\") +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=test_instance[\"Region\"]) +\n  #scale_color_manual(values=c(\"minus\"=\"darkred\", \"plus\"=\"forestgreen\")) +\n  scale_color_manual(values=colors) +\n  scale_alpha_manual(values=c(\"plus\" = 1, \"minus\" = 1)) +\n  theme_bw() +\n  theme(plot.title = element_text(size=10, hjust=0.5), strip.background = element_rect(fill=NA))\nggsave(filename = \"/home/philipp/BPNet/out/figures/example_low_q.pdf\", \n       plot = p, width = 4, height = 8)\np + \n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-28-1.png){width=384}\n:::\n:::\n\n\n<details>\n<summary>Click to view more plots</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\ntest_df <- peak_infos %>%\n  as.data.frame() %>%\n  dplyr::filter(set==\"train\") %>%\n  dplyr::mutate(Region = paste0(seqnames, \":\", start, \"-\", end)) %>%\n  dplyr::group_by(TF) %>%\n  slice_sample(n=5) %>%\n  select(Region, TF, qValue)\n\npurrr::walk(1:nrow(test_df), function(i) {\n  test_instance <- unlist(test_df[i, ])\n  purrr::map_dfr(TFs, function(tf){\n  tibble::tibble(position=-499:500, \n                 plus = tf_counts[[tf]]$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                 minus = -tf_counts[[tf]]$train$neg[match(test_instance[\"Region\"], seq_names$train), ]) %>%\n    dplyr::mutate(TF = tf, p_name = test_instance[\"Region\"])\n  }) %>% \n  rbind(\n    tibble::tibble(position=-499:500, \n                   plus = ctrl_counts$train$pos[match(test_instance[\"Region\"], seq_names$train), ],\n                   minus = -ctrl_counts$train$neg[match(test_instance[\"Region\"], seq_names$train), ],\n                   TF = \"Bias\", p_name = test_instance[\"Region\"])\n  ) %>%\n  pivot_longer(cols=c(minus, plus)) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, color=name)) +\n  facet_wrap(~TF, scales=\"free_y\") +\n  ggdark::dark_theme_linedraw() +\n  labs(x=\"Relative Position [bp]\", y=\"Counts\", color=\"Strand\", \n       title=paste0(\"Peak \", test_instance[\"Region\"], \" | \", test_instance[\"TF\"], \n                    \" | \", test_instance[\"qValue\"])) -> p\n  print(p)\n})\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-19.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-29-20.png){width=672}\n:::\n:::\n\n\n# Figure 1e\n\n## From Raw Data\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-30_c032132aaf827fd97f40ee96ad84f197'}\n\n```{.r .cell-code}\nroi <- list(\"seqname\"=\"chr1\", \"start\"=180924752, \"end\"=180925152)\nTFs <- c(\"Oct4\", \"Sox2\", \"Nanog\", \"Klf4\")\ndf <-\n  purrr::map_dfr(TFs, function(tf) {\n    alignments <- readGAlignments(paste0(\"../data/chip-nexus/\", tf, \"/pool_filt.bam\"),\n                                  param = ScanBamParam(which=GRanges(paste0(roi$seqname, \":\", roi$start, \"-\", roi$end))))\n    align_pos <- alignments[strand(alignments)==\"+\"]\n    align_neg <- alignments[strand(alignments)==\"-\"]\n\n    align_pos@cigar <- rep(\"1M\", length(align_pos))\n    align_neg@start <- GenomicAlignments::end(align_neg)\n    align_neg@cigar <- rep(\"1M\", length(align_neg))\n\n    tibble::tibble(pos=as.numeric(coverage(align_pos)$chr1[roi$start:roi$end]),\n                   neg=-as.numeric(coverage(align_neg)$chr1[roi$start:roi$end]),\n                   position=roi$start:roi$end,\n                   TF=tf)\n  }) %>%\n  pivot_longer(cols=c(\"pos\", \"neg\"))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,208 x 4\n    position TF    name  value\n       <int> <chr> <chr> <dbl>\n 1 180924752 Oct4  pos       0\n 2 180924752 Oct4  neg       0\n 3 180924753 Oct4  pos       2\n 4 180924753 Oct4  neg       0\n 5 180924754 Oct4  pos       2\n 6 180924754 Oct4  neg       0\n 7 180924755 Oct4  pos       0\n 8 180924755 Oct4  neg       0\n 9 180924756 Oct4  pos       0\n10 180924756 Oct4  neg       0\n# ... with 3,198 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  mutate(TF = factor(TF, levels=c(TFs))) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, col=name)) +\n  facet_wrap(~TF, ncol=1, scales=\"free_y\") +\n  labs(x=\"Position\", y=\"Counts\", col=\"Strand\") +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-31-1.png){width=768}\n:::\n:::\n\n\n## From Processed Data\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-32_570723a7cd36cae03b0d016ea623fe84'}\n\n```{.r .cell-code}\nroi <- list(\"seqname\"=\"chr1\", \"start\"=180924752, \"end\"=180925152)\nroi_adjusted <- roi\nroi_adjusted$start = roi_adjusted$start-1000\nroi_adjusted$end = roi_adjusted$end+1000\n\nTFs <- c(\"Oct4\", \"Sox2\", \"Nanog\", \"Klf4\")\ndf2 <- \n  purrr::map_dfr(TFs, function(tf) {\n    cov_list <- list(\"pos\" = tf_counts[[tf]]$test$pos,\n                     \"neg\" = tf_counts[[tf]]$test$neg)\n    rnames <- seq_names$test\n    gr_rnames <- GRanges(rnames)\n    \n    bool_vec <- \n      (as.character(gr_rnames@seqnames) == roi_adjusted$seqname &\n      start(gr_rnames@ranges) >= roi_adjusted$start &\n      end(gr_rnames@ranges) <= roi_adjusted$end)\n    \n    peak_index <- which(bool_vec)[1]\n    peak_info <- gr_rnames[peak_index]\n    \n    diff <- 180924752 - start(peak_info@ranges) + 1\n    w <- 400\n    \n    tibble::tibble(pos=cov_list$pos[peak_index, diff:(diff+w)],\n                   neg=-cov_list$neg[peak_index, diff:(diff+w)],\n                   position=0:400,\n                   TF=tf)\n}) %>%\n  pivot_longer(cols=c(\"pos\", \"neg\"))\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,208 x 4\n   position TF    name  value\n      <int> <chr> <chr> <dbl>\n 1        0 Oct4  pos       0\n 2        0 Oct4  neg       0\n 3        1 Oct4  pos       2\n 4        1 Oct4  neg       0\n 5        2 Oct4  pos       2\n 6        2 Oct4  neg       0\n 7        3 Oct4  pos       0\n 8        3 Oct4  neg       0\n 9        4 Oct4  pos       0\n10        4 Oct4  neg       0\n# ... with 3,198 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 %>%\n  mutate(TF = factor(TF, levels=c(TFs))) %>%\n  ggplot() +\n  geom_line(aes(x=position, y=value, col=name)) +\n  facet_wrap(~TF, ncol=1, scales=\"free_y\") +\n  labs(x=\"Position\", y=\"Counts\", col=\"Strand\") +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-33-1.png){width=768}\n:::\n:::\n\n\nCompare.\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-34_e0dca49a242f94122ac21f65c52395ef'}\n\n```{.r .cell-code}\nall(df2$value == df$value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nall(df2$TF == df$TF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nall(df2$name == df$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# Oct4-Sox2 Motif\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmotif <- TFBSTools::getMatrixByID(JASPAR2020, ID = \"MA0142.1\")\nseqLogo::seqLogo(motif@profileMatrix / colSums(motif@profileMatrix))\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-36_84133ac069e9adb9b03664ef935ec98a'}\n\n```{.r .cell-code}\nw = 400\nmotif_matches <- motifmatchr::matchMotifs(motif, peak_infos, genome = \"mm10\", out=\"position\")[[1]] %>%\n  GenomicRanges::resize(width=w, fix=\"center\") %>%\n  plyranges::filter(score > 20.8) %>%\n  plyranges::arrange(score)\nsaveRDS(motif_matches, \"/home/philipp/BPNet/input/oct4_sox2_matches.rds\")\nmotif_matches\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 408 ranges and 1 metadata column:\n        seqnames            ranges strand |     score\n           <Rle>         <IRanges>  <Rle> | <numeric>\n    [1]     chr4 84528359-84528758      + |   20.8166\n    [2]     chr4 84528359-84528758      + |   20.8166\n    [3]    chr12 86188063-86188462      - |   20.8166\n    [4]    chr16 23504381-23504780      + |   20.8166\n    [5]     chr9 14619412-14619811      + |   20.8166\n    ...      ...               ...    ... .       ...\n  [404]    chr15 75270453-75270852      + |   23.4055\n  [405]    chr15 80618982-80619381      - |   23.4055\n  [406]     chr7 35617437-35617836      - |   23.4055\n  [407]     chr8 76863085-76863484      + |   23.4055\n  [408]     chr1 75997151-75997550      + |   23.4055\n  -------\n  seqinfo: 21 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-37_b92fb097c5f7f4309e27a377178b429e'}\n\n```{.r .cell-code}\nmotif_matches_reduced <- GenomicRanges::reduce(resize(motif_matches, GenomicRanges::width(motif_matches + 1), \"start\"))\n\n### Parallel loop over all tfs\nmotif_counts <- c(\"Oct4\", \"Sox2\") %>%\n  purrr::set_names() %>%\n  furrr::future_map(function(tf) {\n    \n  # read only from the alignment file in the given peak regions\n  # note: make sure that the BAM file is sorted (check for presence of \".bam.bai\")\n  alignments <- readGAlignments(paste0(\"../data/chip-nexus/\", tf, \"/pool_filt.bam\"),\n                                param = ScanBamParam(which=motif_matches_reduced))\n\n  # split the alignment into pos and neg strand\n  align_pos <- alignments[GenomicRanges::strand(alignments)==\"+\"]\n  align_neg <- alignments[GenomicRanges::strand(alignments)==\"-\"]\n\n  # only retain first base pair of each read\n  align_pos@cigar <- rep(\"1M\", length(align_pos))\n  align_neg@start <- GenomicAlignments::end(align_neg)\n  align_neg@cigar <- rep(\"1M\", length(align_neg))\n\n  # compute the coverage per base pair\n  cov_list = list(\"pos\" = GenomicAlignments::coverage(align_pos, weight = 1L),\n                  \"neg\" = GenomicAlignments::coverage(align_neg, weight = 1L))\n    \n  c(\"pos\", \"neg\") %>%\n    purrr::set_names() %>%\n    purrr::map(function(strand) {\n          mtx <- matrix(data=0, ncol=w, nrow=length(motif_matches))\n          for (i in 1:length(motif_matches)) {\n            chr <- as.character(motif_matches[i]@seqnames)\n            position_index <- motif_matches[i]@ranges@start:(motif_matches[i]@ranges@start + w - 1)\n            mtx[i, ] = as.numeric(cov_list[[strand]][[chr]][position_index])\n          }\n          mtx\n      })\n  })\n```\n:::\n\n\nPlotting the means per motif as in Figure 1c.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbind(\n  tibble(pos = 1:ncol(motif_counts$Oct4$pos),\n         counts_pos = colMeans(motif_counts$Oct4$pos),\n         counts_neg = -colMeans(motif_counts$Oct4$neg),\n         TF = \"Oct4\"),\n  tibble(pos = 1:ncol(motif_counts$Sox2$pos),\n         counts_pos = colMeans(motif_counts$Sox2$pos),\n         counts_neg = -colMeans(motif_counts$Sox2$neg),\n         TF = \"Sox2\")\n) %>%\n  ggplot() +\n  geom_line(aes(x=pos, y=counts_pos, color=TF), size=0.5) +\n  geom_line(aes(x=pos, y=counts_neg, color=TF), size=0.5) +\n  scale_color_manual(values=c(\"Oct4\" = \"darkred\", \"Sox2\" = \"blue\")) +\n  labs(x=\"Position [bp]\", y=\"Coverage\", color=\"TF\") +\n  ggdark::dark_theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nPlot the coverage per motif and per sequence as in Figure 1b\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-39_c6939a0b4a038ee9d288f727183df753'}\n\n```{.r .cell-code}\ndf <- \n  purrr::imap_dfr(motif_counts, function(cov, tf) {\n    purrr::imap_dfr(cov, function(mtx, strand) {\n      purrr::map_dfr(1:nrow(mtx), function(i) {\n        tibble::tibble(seq = i,\n                       idx = (-w/2):(w/2 -1),\n                       counts = mtx[i, ],\n                       s = strand,\n                       TF = tf)\n      })\n    })\n  })\n```\n:::\n\n\nPlot via log2 FC at each position\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcount = 1\ndf %>%\n  pivot_wider(names_from=s, values_from=counts) %>%\n  dplyr::filter(TF==\"Oct4\") %>%\n  dplyr::mutate(diff = log2(pos+pcount) - log2(neg+pcount)) %>%\n  ggplot(aes(y=seq, x=idx)) +\n  geom_raster(aes(fill=diff)) +\n  scale_fill_gradient2(low = \"blue\", mid=\"black\", high=\"red\") +\n  theme_classic() +\n  labs(x = \"Relative Postion [bp]\", y = \"Top Oct4-Sox2 Motifs\", fill = \"Log2 FC\",\n       title=\"Oct4\") +\n  ggdark::dark_mode()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-40-1.png){width=384}\n:::\n\n```{.r .cell-code}\ndf %>%\n  pivot_wider(names_from=s, values_from=counts) %>%\n  dplyr::filter(TF==\"Sox2\") %>%\n  dplyr::mutate(diff = log2(pos+pcount) - log2(neg+pcount)) %>%\n  ggplot(aes(y=seq, x=idx)) +\n  geom_raster(aes(fill=diff)) +\n  scale_fill_gradient2(low = \"blue\", mid=\"black\", high=\"red\") +\n  theme_classic() +\n  labs(x = \"Relative Postion [bp]\", y = \"Top Oct4-Sox2 Motifs\", fill = \"Log2 FC\",\n       title=\"Sox2\") +\n  ggdark::dark_mode()\n```\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-40-2.png){width=384}\n:::\n:::\n\n\nPlot via facetting\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntf = \"Oct4\"\ntmp <- df %>%\n  dplyr::filter(TF==tf) %>%\n  dplyr::mutate(counts = ifelse(s==\"pos\", counts, -counts)) %>%\n  pull(counts)\ndf %>%\n  dplyr::filter(TF==tf) %>%\n  dplyr::mutate(counts = ifelse(s==\"pos\", counts, -counts)) %>%\n  ggplot(aes(y=seq, x=idx)) +\n  geom_raster(aes(fill=counts)) +\n  scale_fill_gradient2(low = \"blue\", mid=\"black\", high=\"red\") +\n  scale_fill_gradientn(colours = c(\"red\", \"black\", \"blue\"),\n                       values = scales::rescale(c(max(tmp), 5, 0, -5, min(tmp)))) +\n  theme_classic() +\n  labs(x = \"Relative Postion [bp]\", y = \"Top Oct4-Sox2 Motifs\", fill = \"Log2 FC\",\n       title=tf) +\n  ggdark::dark_mode() +\n  facet_wrap(~s, ncol=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'fill' is already present. Adding another scale for 'fill', which\nwill replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntf = \"Sox2\"\ntmp <- df %>%\n  dplyr::filter(TF==tf) %>%\n  dplyr::mutate(counts = ifelse(s==\"pos\", counts, -counts)) %>%\n  pull(counts)\ndf %>%\n  dplyr::filter(TF==tf) %>%\n  dplyr::mutate(counts = ifelse(s==\"pos\", counts, -counts)) %>%\n  ggplot(aes(y=seq, x=idx)) +\n  geom_raster(aes(fill=counts)) +\n  scale_fill_gradient2(low = \"blue\", mid=\"black\", high=\"red\") +\n  scale_fill_gradientn(colours = c(\"red\", \"black\", \"blue\"),\n                       values = scales::rescale(c(max(tmp), 5, 0, -5, min(tmp)))) +\n  theme_classic() +\n  labs(x = \"Relative Postion [bp]\", y = \"Top Oct4-Sox2 Motifs\", fill = \"Log2 FC\",\n       title=tf) +\n  ggdark::dark_mode() +\n  facet_wrap(~s, ncol=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'fill' is already present. Adding another scale for 'fill', which\nwill replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](01_prepare_input_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n# Appendix\n\n## Save Image\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-43_7ad40a31160751f2f1dc36463fb7dc16'}\n\n```{.r .cell-code}\nsave.image(paste0(output_dir, \"tmp.RData\"))\n```\n:::\n\n\n## Session Info\n\n\n::: {.cell hash='01_prepare_input_cache/html/unnamed-chunk-44_cc9ed75eea43b0252e93b72517101bb4'}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n[1] C\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] TFBSTools_1.34.0                   JASPAR2020_0.99.10                \n [3] motifmatchr_1.18.0                 furrr_0.3.0                       \n [5] future_1.27.0                      forcats_0.5.1                     \n [7] stringr_1.4.0                      dplyr_1.0.9                       \n [9] purrr_0.3.4                        readr_2.1.2                       \n[11] tidyr_1.2.0                        tibble_3.1.8                      \n[13] ggplot2_3.3.6                      tidyverse_1.3.2                   \n[15] BSgenome.Mmusculus.UCSC.mm10_1.4.3 BSgenome_1.64.0                   \n[17] BRGenomics_1.8.0                   GenomicAlignments_1.32.1          \n[19] Rsamtools_2.12.0                   Biostrings_2.64.0                 \n[21] XVector_0.36.0                     SummarizedExperiment_1.26.1       \n[23] Biobase_2.56.0                     MatrixGenerics_1.8.1              \n[25] matrixStats_0.62.0                 rtracklayer_1.56.1                \n[27] GenomicRanges_1.48.0               GenomeInfoDb_1.32.3               \n[29] IRanges_2.30.0                     S4Vectors_0.34.0                  \n[31] BiocGenerics_0.42.0                reticulate_1.26                   \n\nloaded via a namespace (and not attached):\n  [1] readxl_1.4.0                backports_1.4.1            \n  [3] plyr_1.8.7                  splines_4.2.1              \n  [5] BiocParallel_1.30.3         listenv_0.8.0              \n  [7] digest_0.6.29               htmltools_0.5.3            \n  [9] GO.db_3.15.0                fansi_1.0.3                \n [11] magrittr_2.0.3              memoise_2.0.1              \n [13] googlesheets4_1.0.0         tzdb_0.3.0                 \n [15] globals_0.16.0              annotate_1.74.0            \n [17] modelr_0.1.8                R.utils_2.12.0             \n [19] colorspace_2.0-3            blob_1.2.3                 \n [21] rvest_1.0.2                 haven_2.5.0                \n [23] xfun_0.32                   crayon_1.5.1               \n [25] RCurl_1.98-1.8              jsonlite_1.8.0             \n [27] genefilter_1.78.0           TFMPvalue_0.0.8            \n [29] survival_3.4-0              glue_1.6.2                 \n [31] gtable_0.3.0                gargle_1.2.0               \n [33] zlibbioc_1.42.0             DelayedArray_0.22.0        \n [35] ggdark_0.2.1                plyranges_1.16.0           \n [37] scales_1.2.0                DBI_1.1.3                  \n [39] Rcpp_1.0.9                  xtable_1.8-4               \n [41] bit_4.0.4                   httr_1.4.3                 \n [43] RColorBrewer_1.1-3          ellipsis_0.3.2             \n [45] pkgconfig_2.0.3             XML_3.99-0.10              \n [47] R.methodsS3_1.8.2           farver_2.1.1               \n [49] dbplyr_2.2.1                locfit_1.5-9.6             \n [51] utf8_1.2.2                  tidyselect_1.1.2           \n [53] labeling_0.4.2              rlang_1.0.4                \n [55] reshape2_1.4.4              AnnotationDbi_1.58.0       \n [57] munsell_0.5.0               cellranger_1.1.0           \n [59] tools_4.2.1                 cachem_1.0.6               \n [61] cli_3.3.0                   DirichletMultinomial_1.38.0\n [63] generics_0.1.3              RSQLite_2.2.16             \n [65] broom_1.0.0                 evaluate_0.16              \n [67] fastmap_1.1.0               yaml_2.3.5                 \n [69] knitr_1.39                  bit64_4.0.5                \n [71] fs_1.5.2                    caTools_1.18.2             \n [73] KEGGREST_1.36.3             R.oo_1.25.0                \n [75] poweRlaw_0.70.6             pracma_2.3.8               \n [77] xml2_1.3.3                  compiler_4.2.1             \n [79] png_0.1-7                   reprex_2.0.1               \n [81] geneplotter_1.74.0          stringi_1.7.8              \n [83] lattice_0.20-45             CNEr_1.32.0                \n [85] Matrix_1.5-1                vctrs_0.4.1                \n [87] pillar_1.8.0                lifecycle_1.0.1            \n [89] bitops_1.0-7                R6_2.5.1                   \n [91] BiocIO_1.6.0                parallelly_1.32.1          \n [93] codetools_0.2-18            gtools_3.9.3               \n [95] assertthat_0.2.1            seqLogo_1.62.0             \n [97] DESeq2_1.36.0               rjson_0.2.21               \n [99] withr_2.5.0                 GenomeInfoDbData_1.2.8     \n[101] parallel_4.2.1              hms_1.1.1                  \n[103] grid_4.2.1                  rmarkdown_2.14             \n[105] googledrive_2.0.0           lubridate_1.8.0            \n[107] restfulr_0.0.15            \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}