{
  "hash": "a125c531c25e5db8f300e5bae3655861",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Architecture Comparisons\"\njupyter: py-env-bpnet\nexecute:\n  freeze: auto\n---\n\n\n# Libraries\n\n::: {#e8d56dd6 .cell execution_count=1}\n``` {.python .cell-code}\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport sklearn.metrics as skm\nimport pandas as pd\nimport seaborn as sns\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom src.config import conf_dict\nfrom src.architectures import BPNet\nfrom src.utils import ChIP_Nexus_Dataset, dummy_shape_predictions, dummy_total_counts_predictions\nfrom src.loss import neg_log_multinomial\nfrom src.metrics import permute_array, bin_max_values, bin_counts_amb, binary_labels_from_counts, compute_auprc_bins\n\ncolor_pal = {\"Oct4\": \"#CD5C5C\", \"Sox2\": \"#849EEB\", \"Nanog\": \"#FFE03F\", \"Klf4\": \"#92C592\", \"patchcap\": \"#827F81\"}\nplt.style.use('dark_background')\n```\n:::\n\n\n::: {#c3ca99d2 .cell execution_count=2}\n``` {.python .cell-code}\nif torch.cuda.is_available():\n  device = \"cuda\"\nelif torch.backends.mps.is_available():\n  device = torch.device(\"mps\")\nelse:\n  decive = \"cpu\"\nprint(f\"Using {device} device\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing cuda device\n```\n:::\n:::\n\n\n# Setup\n\n::: {#84eaf4c4 .cell execution_count=3}\n``` {.python .cell-code}\n#conf_dict[\"tf_list\"] = [\"Nanog\"]\n#conf_dict[\"batch_size\"] = 248\n#conf_dict[\"max_epochs\"] = 25\n#conf_dict[\"early_stop_patience\"] = 4\n#conf_dict[\"restore_best_weights\"] = True\n\nPRC_DIR = Path(\"..\") / \"prc\"\nSTATS_DIR = Path(\"..\") / \"stats\" / \"architecture_comparison\"\nSTATS_DIR.mkdir(exist_ok=True, parents=True)\nMODELS_DIR = Path(\"..\") / \"trained_models\"\nMODELS_DIR.mkdir(exist_ok=True, parents=True)\n\nretrain_conv_layers = True\nretrain_channel = True\nretrain_kern_size = True\n```\n:::\n\n\n::: {#0d23781d .cell execution_count=4}\n``` {.python .cell-code}\nif torch.cuda.is_available():\n  device = \"cuda\"\nelif torch.backends.mps.is_available():\n  device = torch.device(\"mps\")\nelse:\n  decive = \"cpu\"\nprint(f\"Using {device} device\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing cuda device\n```\n:::\n:::\n\n\n# Data\n\n::: {#37ab3c45 .cell execution_count=5}\n``` {.python .cell-code}\ntrain_dataset = ChIP_Nexus_Dataset(set_name=\"train\", \n                                   input_dir=PRC_DIR, \n                                   TF_list=conf_dict[\"tf_list\"])\ntrain_dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nChIP_Nexus_Dataset\nSet: train\nTFs: ['Nanog', 'Klf4', 'Oct4', 'Sox2']\nSize: 93904\n```\n:::\n:::\n\n\nDetermine $\\lambda$ hyperparameter\n\n::: {#bbb89f5b .cell execution_count=6}\n``` {.python .cell-code}\nlambda_param = (np.median(train_dataset.tf_counts.sum(axis=-1), axis=0)).mean() / 10\nlambda_param\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnp.float32(11.7375)\n```\n:::\n:::\n\n\n::: {#704e52a4 .cell execution_count=7}\n``` {.python .cell-code}\ndummy_shape_predictions(train_dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnfiform Prediction Loss:\t490.46\nMean Prediction Loss:\t\t438.73\nPerfect Prediction Loss:\t133.78\n```\n:::\n:::\n\n\n::: {#bc671701 .cell execution_count=8}\n``` {.python .cell-code}\ndummy_total_counts_predictions(train_dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Prediction Loss:\t\t0.71\nPerfect Prediction Loss:\t0.00\n```\n:::\n:::\n\n\n::: {#63c36c64 .cell execution_count=9}\n``` {.python .cell-code}\ntune_dataset = ChIP_Nexus_Dataset(set_name=\"tune\", \n                                  input_dir=PRC_DIR, \n                                  TF_list=conf_dict[\"tf_list\"])\ntune_dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nChIP_Nexus_Dataset\nSet: tune\nTFs: ['Nanog', 'Klf4', 'Oct4', 'Sox2']\nSize: 29277\n```\n:::\n:::\n\n\n::: {#95aec22e .cell execution_count=10}\n``` {.python .cell-code}\ndummy_shape_predictions(tune_dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnfiform Prediction Loss:\t494.43\nMean Prediction Loss:\t\t442.46\nPerfect Prediction Loss:\t135.56\n```\n:::\n:::\n\n\n# Different Number of Dilated Convolutational Layers\n\n## Training (Only Shape Prediction)\n\n::: {#3f550d46 .cell execution_count=11}\n``` {.python .cell-code}\nn_layers_list = np.arange(1,16)\n\nif retrain_conv_layers:\n  for n_layers in n_layers_list:\n    model = BPNet(n_dil_layers=n_layers, TF_list=conf_dict[\"tf_list\"], pred_total=False, bias_track=True).to(device)\n    optimizer = optim.Adam(model.parameters(), lr=4*1e-4)\n\n    train_loader=DataLoader(train_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=True, num_workers=0, pin_memory=True)\n    tune_loader=DataLoader(tune_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=False, num_workers=0, pin_memory=True)\n\n    train_loss, test_loss = [], []\n    patience_counter = 0\n\n    for epoch in range(conf_dict[\"max_epochs\"]):\n      model.train()\n      train_loss_epoch = []\n      for one_hot, tf_counts, ctrl_counts, ctrl_smooth in train_loader:\n        one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n        optimizer.zero_grad()\n        profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n        loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n        train_loss_epoch.append(loss.item())\n        loss.backward()\n        optimizer.step()\n      train_loss.append(sum(train_loss_epoch)/len(train_loss_epoch))\n\n      # evaluation part\n      test_loss_epoch = []\n      with torch.no_grad():\n          for one_hot, tf_counts, ctrl_counts, ctrl_smooth in tune_loader:\n              one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n              profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n              loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n              test_loss_epoch.append(loss.item())\n          test_loss.append(sum(test_loss_epoch)/len(test_loss_epoch))\n\n      if test_loss[-1] > np.array(test_loss).min():\n        patience_counter += 1\n      else:\n        patience_counter = 0\n        best_state_dict = model.state_dict()\n\n      if patience_counter == conf_dict[\"early_stop_patience\"]:\n        break\n    \n    if conf_dict[\"restore_best_weights\"]:\n      model.load_state_dict(best_state_dict)\n\n    # plot train and test loss\n    plt.plot(np.arange(epoch+1), np.array(train_loss), label=\"train\")\n    plt.plot(np.arange(epoch+1), np.array(test_loss), label=\"test\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.show()\n\n    # save the model\n    torch.save(obj=model, f=MODELS_DIR / f\"{n_layers}_dil_layers_model.pt\")\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-1.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-2.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-3.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-4.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-5.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-6.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-7.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-8.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-9.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-10.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-11.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-12.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-13.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-14.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-12-output-15.png){width=598 height=429}\n:::\n:::\n\n\n## Evaluation\n\n::: {#fe1ade3a .cell execution_count=12}\n``` {.python .cell-code}\ntest_dataset = ChIP_Nexus_Dataset(set_name=\"test\", \n                                  input_dir=PRC_DIR, \n                                  TF_list=conf_dict[\"tf_list\"])\ntest_dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nChIP_Nexus_Dataset\nSet: test\nTFs: ['Nanog', 'Klf4', 'Oct4', 'Sox2']\nSize: 27727\n```\n:::\n:::\n\n\n::: {#648c330d .cell execution_count=13}\n``` {.python .cell-code}\nsave_scores = []\ntest_dataloader = DataLoader(test_dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\ntrue_counts = test_dataset.tf_counts.copy()\nfor n in n_layers_list:\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n  # make predictions\n  pred = torch.zeros(test_dataset.tf_counts.shape, dtype=torch.float32).to(device)\n  with torch.no_grad():\n      for batch_idx, data in enumerate(test_dataloader):\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = data\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n          profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n          pred[batch_idx, :, :, :] = profile_pred\n  all_pred = pred.cpu().numpy().copy()\n  assert np.allclose(all_pred.sum(axis=-1), 1)\n          \n  for i, tf in enumerate(conf_dict[\"tf_list\"]): # loop over the four TFs\n      pred_tf = all_pred[:, i, :, :]\n      counts_tf = true_counts[:, i, :, :]\n      labels, predictions, random = binary_labels_from_counts(counts_tf, pred_tf)\n      auprc_score = skm.average_precision_score(labels, predictions)\n      save_scores.append({\"tf\": tf,\n                          \"n_layers\":n,\n                          \"auprc\": auprc_score})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n/tmp/ipykernel_2022977/2800911921.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_dil_layers_model.pt\")\n```\n:::\n:::\n\n\n::: {#9b3a0c45 .cell execution_count=14}\n``` {.python .cell-code}\ndf = pd.DataFrame(save_scores)\ndf.to_csv(STATS_DIR / \"dil_layers_auprc.csv\")\nsns.scatterplot(data=df, x=\"n_layers\", y=\"auprc\", hue=\"tf\", palette=color_pal)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-15-output-1.png){width=597 height=429}\n:::\n:::\n\n\n# Different Number of Dilated Convolutational Layers\n\n## Training (Only Shape Prediction)\n\n::: {#73644fdb .cell execution_count=15}\n``` {.python .cell-code}\nn_channel_list = np.array([2, 4, 8, 16, 32, 64, 128, 256])\n\nif retrain_channel:\n  for n_channel in n_channel_list:\n    model = BPNet(n_dil_layers=9, TF_list=conf_dict[\"tf_list\"], pred_total=False, bias_track=True, conv_channels=n_channel).to(device)\n    optimizer = optim.Adam(model.parameters(), lr=4*1e-4)\n\n    train_loader=DataLoader(train_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=True, num_workers=0, pin_memory=True)\n    tune_loader=DataLoader(tune_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=False, num_workers=0, pin_memory=True)\n\n    train_loss, test_loss = [], []\n    patience_counter = 0\n\n    for epoch in range(conf_dict[\"max_epochs\"]):\n      model.train()\n      train_loss_epoch = []\n      for one_hot, tf_counts, ctrl_counts, ctrl_smooth in train_loader:\n        one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n        optimizer.zero_grad()\n        profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n        loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n        train_loss_epoch.append(loss.item())\n        loss.backward()\n        optimizer.step()\n      train_loss.append(sum(train_loss_epoch)/len(train_loss_epoch))\n\n      # evaluation part\n      test_loss_epoch = []\n      with torch.no_grad():\n          for one_hot, tf_counts, ctrl_counts, ctrl_smooth in tune_loader:\n              one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n              profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n              loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n              test_loss_epoch.append(loss.item())\n          test_loss.append(sum(test_loss_epoch)/len(test_loss_epoch))\n\n      if test_loss[-1] > np.array(test_loss).min():\n        patience_counter += 1\n      else:\n        patience_counter = 0\n        best_state_dict = model.state_dict()\n\n      if patience_counter == conf_dict[\"early_stop_patience\"]:\n        break\n    \n    if conf_dict[\"restore_best_weights\"]:\n      model.load_state_dict(best_state_dict)\n\n    # plot train and test loss\n    plt.plot(np.arange(epoch+1), np.array(train_loss), label=\"train\")\n    plt.plot(np.arange(epoch+1), np.array(test_loss), label=\"test\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.show()\n\n    # save the model\n    torch.save(obj=model, f=MODELS_DIR / f\"{n_channel}_conv_channel_model.pt\")\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-1.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-2.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-3.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-4.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-5.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-6.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-7.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-16-output-8.png){width=593 height=430}\n:::\n:::\n\n\n## Evaluation\n\n::: {#3181893f .cell execution_count=16}\n``` {.python .cell-code}\ntest_dataset = ChIP_Nexus_Dataset(set_name=\"test\", \n                                  input_dir=PRC_DIR, \n                                  TF_list=conf_dict[\"tf_list\"])\ntest_dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nChIP_Nexus_Dataset\nSet: test\nTFs: ['Nanog', 'Klf4', 'Oct4', 'Sox2']\nSize: 27727\n```\n:::\n:::\n\n\n::: {#a52f604d .cell execution_count=17}\n``` {.python .cell-code}\nsave_scores = []\ntest_dataloader = DataLoader(test_dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\ntrue_counts = test_dataset.tf_counts.copy()\nfor n in n_channel_list:\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n  # make predictions\n  pred = torch.zeros(test_dataset.tf_counts.shape, dtype=torch.float32).to(device)\n  with torch.no_grad():\n      for batch_idx, data in enumerate(test_dataloader):\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = data\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n          profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n          pred[batch_idx, :, :, :] = profile_pred\n  all_pred = pred.cpu().numpy().copy()\n  assert np.allclose(all_pred.sum(axis=-1), 1)\n          \n  for i, tf in enumerate(conf_dict[\"tf_list\"]): # loop over the four TFs\n      pred_tf = all_pred[:, i, :, :]\n      counts_tf = true_counts[:, i, :, :]\n      labels, predictions, random = binary_labels_from_counts(counts_tf, pred_tf)\n      auprc_score = skm.average_precision_score(labels, predictions)\n      save_scores.append({\"tf\": tf,\n                          \"n_channels\":n,\n                          \"auprc\": auprc_score})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n/tmp/ipykernel_2022977/949764765.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_conv_channel_model.pt\")\n```\n:::\n:::\n\n\n::: {#8c633b34 .cell execution_count=18}\n``` {.python .cell-code}\ndf = pd.DataFrame(save_scores)\ndf.to_csv(STATS_DIR / \"conv_channel_auprc.csv\")\nsns.scatterplot(data=df, x=\"n_channels\", y=\"auprc\", hue=\"tf\", palette=color_pal)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-19-output-1.png){width=597 height=429}\n:::\n:::\n\n\n# Different Sizes of the first Kernel\n\n## Training (Only Shape Prediction)\n\n::: {#2f6b88fc .cell execution_count=19}\n``` {.python .cell-code}\nkernel_sizes = np.array([5, 9, 13, 17, 21, 25, 29, 33, 37])\n\nif retrain_kern_size:\n  for kern_size in kernel_sizes:\n    model = BPNet(n_dil_layers=9, TF_list=conf_dict[\"tf_list\"], pred_total=False, bias_track=True, conv_channels=64, size_first_kernel=kern_size).to(device)\n    optimizer = optim.Adam(model.parameters(), lr=4*1e-4)\n\n    train_loader=DataLoader(train_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=True, num_workers=0, pin_memory=True)\n    tune_loader=DataLoader(tune_dataset, batch_size=conf_dict[\"batch_size\"], shuffle=False, num_workers=0, pin_memory=True)\n\n    train_loss, test_loss = [], []\n    patience_counter = 0\n\n    for epoch in range(conf_dict[\"max_epochs\"]):\n      model.train()\n      train_loss_epoch = []\n      for one_hot, tf_counts, ctrl_counts, ctrl_smooth in train_loader:\n        one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n        optimizer.zero_grad()\n        profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n        loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n        train_loss_epoch.append(loss.item())\n        loss.backward()\n        optimizer.step()\n      train_loss.append(sum(train_loss_epoch)/len(train_loss_epoch))\n\n      # evaluation part\n      test_loss_epoch = []\n      with torch.no_grad():\n          for one_hot, tf_counts, ctrl_counts, ctrl_smooth in tune_loader:\n              one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n              profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n              loss = neg_log_multinomial(k_obs=tf_counts, p_pred=profile_pred, device=device)\n              test_loss_epoch.append(loss.item())\n          test_loss.append(sum(test_loss_epoch)/len(test_loss_epoch))\n\n      if test_loss[-1] > np.array(test_loss).min():\n        patience_counter += 1\n      else:\n        patience_counter = 0\n        best_state_dict = model.state_dict()\n\n      if patience_counter == conf_dict[\"early_stop_patience\"]:\n        break\n    \n    if conf_dict[\"restore_best_weights\"]:\n      model.load_state_dict(best_state_dict)\n\n    # plot train and test loss\n    plt.plot(np.arange(epoch+1), np.array(train_loss), label=\"train\")\n    plt.plot(np.arange(epoch+1), np.array(test_loss), label=\"test\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.show()\n\n    # save the model\n    torch.save(obj=model, f=MODELS_DIR / f\"{kern_size}_first_kern_size_model.pt\")\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-1.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-2.png){width=598 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-3.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-4.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-5.png){width=598 height=433}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-6.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-7.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-8.png){width=598 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-20-output-9.png){width=598 height=434}\n:::\n:::\n\n\n## Evaluation\n\n::: {#576767c0 .cell execution_count=20}\n``` {.python .cell-code}\ntest_dataset = ChIP_Nexus_Dataset(set_name=\"test\", \n                                  input_dir=PRC_DIR, \n                                  TF_list=conf_dict[\"tf_list\"])\ntest_dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nChIP_Nexus_Dataset\nSet: test\nTFs: ['Nanog', 'Klf4', 'Oct4', 'Sox2']\nSize: 27727\n```\n:::\n:::\n\n\n::: {#ac5e4178 .cell execution_count=21}\n``` {.python .cell-code}\nsave_scores = []\ntest_dataloader = DataLoader(test_dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\ntrue_counts = test_dataset.tf_counts.copy()\nfor n in kernel_sizes:\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n  # make predictions\n  pred = torch.zeros(test_dataset.tf_counts.shape, dtype=torch.float32).to(device)\n  with torch.no_grad():\n      for batch_idx, data in enumerate(test_dataloader):\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = data\n          one_hot, tf_counts, ctrl_counts, ctrl_smooth = one_hot.to(device), tf_counts.to(device), ctrl_counts.to(device), ctrl_smooth.to(device)\n          profile_pred = model.forward(sequence=one_hot, bias_raw=ctrl_counts, bias_smooth=ctrl_smooth)\n          pred[batch_idx, :, :, :] = profile_pred\n  all_pred = pred.cpu().numpy().copy()\n  assert np.allclose(all_pred.sum(axis=-1), 1)\n          \n  for i, tf in enumerate(conf_dict[\"tf_list\"]): # loop over the four TFs\n      pred_tf = all_pred[:, i, :, :]\n      counts_tf = true_counts[:, i, :, :]\n      labels, predictions, random = binary_labels_from_counts(counts_tf, pred_tf)\n      auprc_score = skm.average_precision_score(labels, predictions)\n      save_scores.append({\"tf\": tf,\n                          \"first_kern_size\": n,\n                          \"auprc\": auprc_score})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n/tmp/ipykernel_2022977/1834439522.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model = torch.load(MODELS_DIR / f\"{n}_first_kern_size_model.pt\")\n```\n:::\n:::\n\n\n::: {#844dc136 .cell execution_count=22}\n``` {.python .cell-code}\ndf = pd.DataFrame(save_scores)\ndf.to_csv(STATS_DIR / \"first_kern_size_auprc.csv\")\nsns.scatterplot(data=df, x=\"first_kern_size\", y=\"auprc\", hue=\"tf\", palette=color_pal)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_architecture_comparison_files/figure-html/cell-23-output-1.png){width=597 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "05_architecture_comparison_files"
    ],
    "filters": [],
    "includes": {}
  }
}